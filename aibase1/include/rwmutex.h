


#ifndef __RWMUTEX_H__
#define __RWMUTEX_H__

// system includes
#include <pthread.h>

namespace SRThread {

/** \addtogroup libsr 基础工具库(libsr) 
@{ 
*/

/** @file rwmutex.h
 * \brief 读写互斥量.
**/


/**
 * \brief SRThread::RWMutex包裹类封装POSIX Thread的读写互斥量。在给定的时间内可以有
 *　多个线程拥有读锁，但只有一个线程可以拥有写锁。
 *
 * 这种类型的互斥量可用在经常需要被访问但有时需要更新的资源上。
**/
class RWMutex {
	friend class RLock;
    friend class WLock;

public:
    //####################################################################
    /** 
     * \brief 构造函数
     *
    **/
    //####################################################################
    RWMutex (void);

    //####################################################################
    /** 
     * \brief 析构函数
     *
    **/
    //####################################################################
    ~RWMutex (void);

    pthread_rwlock_t& mutex(void);

    /**
     * \brief SRThread::RWMutex::RLock提供RWMutex对象的读写锁．
     */
    class RLock {
    public:
	//####################################################################
	/** 
	 * \brief 在给定的读写互斥对象上获取读锁．
	 *
	 * @param m RWMutex实例.
	**/
	//####################################################################
	explicit RLock (RWMutex &m);

	//####################################################################
	/** 
	 * \brief 析构函数，
	 *
	**/
	//####################################################################
	~RLock (void);

	//####################################################################
	/** 
	 * \brief 对RWMutex对象请求读锁．如果当前线程已经拥有一个读锁，调用这个方法将
	 * 导致抛异常．
	**/
	//####################################################################
	void lock (void);

	//####################################################################
	/** 
	 * \brief 释放锁．如果当前线程并不拥有这个读锁，调用这个方法将导致抛异常．
	**/
	//####################################################################
	void unlock (void);

	private:
		RLock (const RLock&);
		RLock& operator= (const RLock&);

    private:
		pthread_rwlock_t &mutex_;
		volatile bool locked_;


    }; 

    /**
     * \brief SRThread::RWMutex::WLock内嵌类提供RWMutex实例的写锁请求和释放．
     */
    class WLock {
    public:
	//####################################################################
	/** 
	 * \brief 对给定的RWMutex对象创建写锁
	 *
	 * @param m RWMutex实例.
	**/
	//####################################################################
	explicit WLock (RWMutex &m);

	//####################################################################
	/** 
	 * \brief 析构函数
	 *
	**/
	//####################################################################
	~WLock (void);

	//####################################################################
	/** 
	 *　\brief 请求获取读锁，如果当前线程已经拥有读锁，调用这个方法将导致抛出异常.
	 *
	 * @author Peter Jones
	**/
	//####################################################################
	void lock (void);

	//####################################################################
	/** 
	 * \brief 释放读锁. 
	**/
	//####################################################################
	void unlock (void);

	private:
	WLock (const WLock&);
	WLock& operator= (const WLock&);

	private:
		pthread_rwlock_t &mutex_;
		volatile bool locked_;
    }; 

private:
    RWMutex (const RWMutex&);
    RWMutex& operator= (const RWMutex&);

private:
    pthread_rwlock_t mutex_;

}; 

} 
/** @} */

#endif
